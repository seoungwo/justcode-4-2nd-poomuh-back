// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  password     String
  name         String
  nickname     String
  phone_number String?
  created_at   DateTime? @default(now())
  updated_at   DateTime? @default(now())
  deleted_at   DateTime? @default(now())

  user_real_estate_like UserRealEstateLike[]

  @@map("users")
}

model RealEstateAgent {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  password       String
  name           String
  nickname       String
  phone_number   String
  real_estate_id Int
  created_at     DateTime? @default(now())
  updated_at     DateTime? @default(now())
  deleted_at     DateTime? @default(now())

  real_estate RealEstate @relation(fields: [real_estate_id], references: [id])

  @@map("real_estate_agent")
}

model RealEstate {
  id                Int       @id @default(autoincrement())
  address           String
  latitude          Int
  longitude         Int
  supply_size       Int
  exclusive_size    Int
  building_floor    String
  current_floor     String
  available_date    String
  descrption_title  String
  descrption_detail String
  is_deleted        Int
  heat_id           Int
  trade_type_id     Int
  category_id       Int
  created_at        DateTime? @default(now())
  updated_at        DateTime? @default(now())
  deleted_at        DateTime? @default(now())

  heat       Heat       @relation(fields: [heat_id], references: [id])
  trades     Trades     @relation(fields: [trade_type_id], references: [id])
  categories Categories @relation(fields: [category_id], references: [id])

  real_estate_agent      RealEstateAgent[]
  users_real_estate_like UserRealEstateLike[]

  @@map("real_estate")
}

model Heat {
  id         Int       @id @default(autoincrement())
  type       String?
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  real_estate RealEstate[]

  @@map("heat")
}

model Categories {
  id         Int       @id @default(autoincrement())
  type       String?
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  real_estate RealEstate[]

  @@map("categories")
}

model Trades {
  id         Int       @id @default(autoincrement())
  type       String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  real_estate RealEstate[]

  @@map("trades")
}

model UserRealEstateLike {
  id             Int       @id @default(autoincrement())
  user_id        Int       @unique
  real_estate_id Int       @unique
  created_at     DateTime? @default(now())
  updated_at     DateTime? @default(now())
  deleted_at     DateTime? @default(now())

  users       Users      @relation(fields: [user_id], references: [id])
  real_estate RealEstate @relation(fields: [real_estate_id], references: [id])


  @@map("user_real_estate_like")
}
