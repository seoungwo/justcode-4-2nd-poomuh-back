// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  password     String
  name         String
  nickname     String
  phone_number String
  created_at   DateTime? @default(now())

  user_real_estate_likes UserRealEstateLikes[]

  @@map("users")
}

model RealEstateAgents {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  password       String
  name           String
  nickname       String
  phone_number   String
  real_estate_id Int
  created_at     DateTime? @default(now())

  real_estates RealEstates @relation(fields: [real_estate_id], references: [id])

  @@map("real_estate_agents")
}

model RealEstates {
  id                Int       @id @default(autoincrement())
  address           String
  latitude          Int
  longitude         Int
  supply_size       Int
  exclusive_size    Int
  building_floor    String
  current_floor     String
  available_date    String
  descrption_title  String
  descrption_detail String    @db.VarChar(1000)
  is_deleted        Boolean
  price_main        Decimal   @db.Decimal(10, 0)
  price_monthly     Decimal?  @db.Decimal(10, 0)
  heat_id           Int
  trade_id          Int
  category_id       Int
  created_at        DateTime? @default(now())
  updated_at        DateTime? @default(now())
  deleted_at        DateTime? @default(now())

  heats      Heats      @relation(fields: [heat_id], references: [id])
  trades     Trades     @relation(fields: [trade_id], references: [id])
  categories Categories @relation(fields: [category_id], references: [id])

  real_estate_agents      RealEstateAgents[]
  users_real_estate_likes UserRealEstateLikes[]

  @@map("real_estates")
}

model Heats {
  id         Int       @id @default(autoincrement())
  type       String
  created_at DateTime? @default(now())


  real_estates RealEstates[]

  @@map("heats")
}

model Categories {
  id         Int       @id @default(autoincrement())
  type       String
  created_at DateTime? @default(now())


  real_estates RealEstates[]

  @@map("categories")
}

model Trades {
  id         Int       @id @default(autoincrement())
  type       String
  created_at DateTime? @default(now())


  real_estates RealEstates[]

  @@map("trades")
}

model UserRealEstateLikes {
  id             Int       @id @default(autoincrement())
  user_id        Int
  real_estate_id Int
  created_at     DateTime? @default(now())
  updated_at     DateTime? @default(now())
  deleted_at     DateTime? @default(now())

  users        Users       @relation(fields: [user_id], references: [id])
  real_estates RealEstates @relation(fields: [real_estate_id], references: [id])


  @@map("user_real_estate_likes")
}
